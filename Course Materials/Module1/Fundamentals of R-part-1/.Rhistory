# Read Input
#--------------------------------------------
person <- read.csv("file1.txt")
person
#--------------------------------------------
# Read Input again but neglect headers
#--------------------------------------------
person <- read.csv(file="file1.txt",header=FALSE,col.names=c("age","height"))
person
#--------------------------------------------
# Read Input again but neglect headers
#--------------------------------------------
person <- read.csv(file="file1.txt",header=FALSE,col.names=c("age","height"))
person
# clear all existing variables from console
cat("\014")
# clear all data variables
rm(list=ls())
#--------------------------------------------
# Read Input
#--------------------------------------------
person <- read.csv("file1.txt")
person
# clear all existing variables from console
cat("\014")
# clear all data variables
rm(list=ls())
#--------------------------------------------
# Read Input
#--------------------------------------------
person <- read.csv("file1.txt")
person
# clear all existing variables from console
cat("\014")
# clear all data variables
rm(list=ls())
#--------------------------------------------
# Read Input
#--------------------------------------------
person <- read.csv("file1.txt")
person
#--------------------------------------------
# Read Input again but neglect headers
#--------------------------------------------
person <- read.csv(file="file1.txt",header=FALSE,col.names=c("age","height"))
person
# clear all existing variables from console
cat("\014")
# clear all data variables
rm(list=ls())
#--------------------------------------------
# Read Input
#--------------------------------------------
person <- read.csv("file1.txt")
person
# clear all existing variables from console
cat("\014")
# clear all data variables
rm(list=ls())
#--------------------------------------------
# Read Input
#--------------------------------------------
person <- read.csv("file1.txt")
person
#--------------------------------------------
# Read Input again but neglect headers
#--------------------------------------------
person <- read.csv(file="file1.txt",header=FALSE,col.names=c("age","height"))
person
# clear all existing variables from console
cat("\014")
# clear all data variables
rm(list=ls())
#--------------------------------------------
# Read Input
#--------------------------------------------
person <- read.csv("file1.txt")
person
#--------------------------------------------
# Read Input again but neglect headers
#--------------------------------------------
person <- read.csv(file="file1.txt",header=FALSE,col.names=c("age","height"),row.names = NULL, sep= " ")
person
######## Explore structure of Data  ###################
str(person)
######## Explore structure of Data  ###################
str(person)
#----  Lets try another read method -----------------
person <- read.csv(file="file1.txt",header=FALSE,col.names=c("age","height"),row.names = NULL, sep= " ",stringsAsFactors=FALSE)
person
person
str(person)
# Lets convert!
person$height <- as.numeric(person$height)
str(person)
#-------------------------------------------------------------------------------
txt <- readLines("dalton.txt")
txt
# detect lines starting with a percentage sign..
I <- grepl("^%", txt)
# and throw them out
dat <- txt[!I]
dat
#----------------------------------------------------------
# Step 3:  Split Lines
#----------------------------------------------------------
fieldList <- strsplit(dat, split = ",")
fieldList
#  Consider the String or Row
row1 <- "Name, 1989, 2001"
Array1 <-  strsplit(row1, split = ",")
Array1
I <- grepl("[[:alpha:]]",Array1)
I <- grepl("[[:alpha:]]",Array1)
I
Char_Array <- Array1[I]
Char_Array
len(Array1)
length(Array1)
Array1 <- list(["Name", 1989, 2001])
length(fieldList)
fieldList[1]
length(fieldList[1])
assignFields <- function(x){
out <- character(3)
# get names
i <- grepl("[[:alpha:]]",x)
out[1] <- x[i]
# get birth date (if any)
i <- which(as.numeric(x) < 1890)
out[2] <- ifelse(length(i)>0, x[i], NA)
# get death date (if any)
i <- which(as.numeric(x) > 1890)
out[3] <- ifelse(length(i)>0, x[i], NA)
out
}
assignFields <- function(x){
out <- character(3)
# get names
i <- grepl("[[:alpha:]]",x)
out[1] <- x[i]
# get birth date (if any)
i <- which(as.numeric(x) < 1890)
out[2] <- ifelse(length(i)>0, x[i], NA)
# get death date (if any)
i <- which(as.numeric(x) > 1890)
out[3] <- ifelse(length(i)>0, x[i], NA)
out
}
assignFields(fieldList)
assignFields <- function(x){
out <- character(3)
# get names
i <- grepl("[[:alpha:]]",x)
out[1] <- x[i]
# get birth date (if any)
i <- which(as.numeric(x) < 1890)
out[2] <- ifelse(length(i)>0, x[i], NA)
# get death date (if any)
i <- which(as.numeric(x) > 1890)
out[3] <- ifelse(length(i)>0, x[i], NA)
out
}
standardFields <- lapply(fieldList, assignFields)
standardFields
assignFields <- function(x){
out <- character(3)
# get names
i <- grepl("[[:alpha:]]",x)
out[1] <- x[i]
# get birth date (if any)
i <- which(as.numeric(x) < 1890)
out[2] <- ifelse(length(i)>0, x[i], NA)
# get death date (if any)
i <- which(as.numeric(x) > 1890)
out[3] <- ifelse(length(i)>0, x[i], NA)
return out
}
assignFields <- function(x){
out <- character(3)
# get names
i <- grepl("[[:alpha:]]",x)
out[1] <- x[i]
# get birth date (if any)
i <- which(as.numeric(x) < 1890)
out[2] <- ifelse(length(i)>0, x[i], NA)
# get death date (if any)
i <- which(as.numeric(x) > 1890)
out[3] <- ifelse(length(i)>0, x[i], NA)
out
}
standardFields <- lapply(fieldList, assignFields)
standardFields
assignFields <- function(x){
out <- character(3)
# get names
i <- grepl("[[:alpha:]]",x)
out[1] <- x[i]
# get birth date (if any)
i <- which(as.numeric(x) < 1890)
out[2] <- ifelse(length(i)>0, x[i], NA)
# get death date (if any)
i <- which(as.numeric(x) > 1890)
out[3] <- ifelse(length(i)>0, x[i], NA)
return(out)
}
standardFields <- lapply(fieldList, assignFields)
standardFields
sublist <- fieldList[1]
class(sublist)
class(sublist)
sublist
sublist <- fieldList21]
class(sublist)
sublist <- fieldList[2]
class(sublist)
sublist
sublist
newsublist <- lapply(sublist, assignFields)
newsublist
#----------------------------------------------------------------
#  Step 5 :  coerce to dataframe
#----------------------------------------------------------------
# Create Empty Matrix
(M <- matrix(
unlist(standardFields)
, nrow=length(standardFields)
, byrow=TRUE))
#----------------------------------------------------------------
#  Step 5 :  coerce to dataframe
#----------------------------------------------------------------
# Create Matrix  from List
(M <- matrix(
unlist(standardFields)
, nrow=length(standardFields)
, byrow=TRUE))
# Set col names for Matrix
colnames(M) <- c("name","birth","death")
# Populate data frame
daltons <- as.data.frame(M, stringsAsFactors=FALSE)
daltons
#----------------------------------------------------------------
#  Step 6 :  Normalize to correct data types
#----------------------------------------------------------------
daltons$birth <- as.numeric(daltons$birth)
daltons$death <- as.numeric(daltons$death)
daltons
# Find the Average of the age column
Age_Vec <- daltons$age
Mean_Age <- mean(Age_Vec)
# Bypass NA's
Mean_Age <- mean(Age_Vec,na.rm=TRUE)
Mean_Age
# Find the Average of the age column
Age_Vec <- numeric(daltons$age)
class(Mean_Age)
class(Age_Vec)
# Find the Average of the age column
Age_Vec <- (daltons$age)
class(Age_Vec)
Age_Vec
# clear all existing variables from console
cat("\014")
# clear all data variables
rm(list=ls())
#--------------------------------------------
# Read Input
#--------------------------------------------
person <- read.csv("file1.txt")
person
#--------------------------------------------
# Read Input again but neglect headers and row names
#--------------------------------------------
person <- read.csv(file="file1.txt",header=FALSE,col.names=c("age","height"),row.names = NULL, sep= " ")
person
######## Explore structure of Data  ###################
str(person)
#----  Lets try another read method -----------------
person <- read.csv(file="file1.txt",header=FALSE,col.names=c("age","height"),row.names = NULL, sep= " ",stringsAsFactors=FALSE)
person
str(person)
# Lets convert!
person$height <- as.numeric(person$height)
str(person)
# Step 1  Read
#------------------------------------------------------------
txt <- readLines("dalton.txt")
txt
# detect lines starting with a percentage sign..
I <- grepl("^%", txt)
# and throw them out
dat <- txt[!I]
dat
#----------------------------------------------------------
# Step 3:  Split Lines
#----------------------------------------------------------
fieldList <- strsplit(dat, split = ",")
fieldList
assignFields <- function(x){
out <- character(3)
# get names
i <- grepl("[[:alpha:]]",x)
out[1] <- x[i]
# get birth date (if any)
i <- which(as.numeric(x) < 1890)
out[2] <- ifelse(length(i)>0, x[i], NA)
# get death date (if any)
i <- which(as.numeric(x) > 1890)
out[3] <- ifelse(length(i)>0, x[i], NA)
return(out)
}
standardFields <- lapply(fieldList, assignFields)
standardFields
#----------------------------------------------------------------
#  Step 5 :  coerce to dataframe
#----------------------------------------------------------------
# Create Matrix  from List
(M <- matrix(
unlist(standardFields)
, nrow=length(standardFields)
, byrow=TRUE))
# Set col names for Matrix
colnames(M) <- c("name","birth","death")
# Populate data frame
daltons <- as.data.frame(M, stringsAsFactors=FALSE)
daltons
# Find the Average of the age column from data below
Age_Vec <- c(23,16,NA)
Mean_Age <- mean(Age_Vec)
Mean_Age
# Bypass NA's
Mean_Age <- mean(,na.rm=TRUE)
Mean_Age
# Bypass NA's
Mean_Age <- mean(Age_Vec,na.rm=TRUE)
Mean_Age
daltons$death <- as.numeric(daltons$death)
daltons
sum(complete.cases(daltons))
NA_row_count <- nrow(daltons) - sum(complete.cases(daltons))
NA_row_count
Good_Rows <- na.omit(daltons)
Good_Rows
# Check Mean Age
Mean_Age
# Impute with Mean
Age_Vec[is.na(Age_Vec)]<- Mean_Age
Age_Vec
# Imputation :   can I replace the NA's with the mean for the below vector?
Age_Vec <- c(23,16,15,26,19,NA)
Mean_Age <- mean(Age_Vec,na.omit=TRUE)
# Check Mean Age
Mean_Age
# Imputation :   can I replace the NA's with the mean for the below vector?
Age_Vec <- c(23,16,15,26,19,NA)
# Imputation :   can I replace the NA's with the mean for the below vector?
Age_Vec <- c(23,16,15,26,19,NA)
Mean_Age <- mean(Age_Vec,na.omit=TRUE)
# Check Mean Age
Mean_Age
# Imputation :   can I replace the NA's with the mean for the below vector?
Age_Vec <- c(23,16,15,26,19,NA)
Mean_Age <- mean(Age_Vec,na.rm=TRUE)
# Check Mean Age
Mean_Age
# Impute with Mean
Age_Vec[is.na(Age_Vec)]<- Mean_Age
Age_Vec
# ***********   Module 3  *********** #
#----------------------------------------------
# clear all existing variables from console
cat("\014")
# clear all data variables
rm(list=ls())
#--------------------------------------------------------------
#  Slicing Vectors
#--------------------------------------------------------------
# Define the vector
vec1 <- c(12,4,4,6,9,3)
# extract the third element
third_elem <- vec1[3]
# display the third element
third_elem
# Define a 2X3 Matrix
A <- matrix(c(2, 4, 3, 1, 5, 7), nrow=2,ncol=3,byrow=TRUE)
# display the matrix
A
# Extracting element at 2nd row, 3rd column
A23 <- A[2, 3]
# Extracting a Vector (2nd row) from the Matrix
ARow2Vec <-  A[2, ]
# Extracting a Sub Matrix from the given Matrix
A2by2 <- A[1:2,1:2]
Slicing Data Frames
#  Data Frames
#Create a dataframe from vectors
n  <-  c(2,3,5)
s  <-  c("aa","bb","cc")
b  <-  c(TRUE,FALSE,TRUE)
df <-  data.frame(n,s,b)   #df is a data frame
#Display Dataframe
df
# Extract element in 1st row and 2nd col
df[1,2]
# Extract the 1st row
df[1,]
# Extract the 2nd col
df[,2]
# Create Building Blocks
Make  <- c("Toyota", "Hyundai","Maruti","Toyota","Hyundai","Maruti","Toyota","Hyundai","Maruti")
Model <- c("Corolla","i20","Alto","Camry","i10","Baleno","Fortuner","Sonata","Astra")
Sales <- c(345,800,2000,150,200,350,50,68,120)
# Create data frame
CarData <- data.frame(Make,Model,Sales)
# Display Data Frame
CarData
#TopSales <- subset(CarData,Sales>500,select=c(Make,Model,Sales))
TopSales <- subset(CarData,Sales>300)
Sorted_TopSales <- TopSales[order(-TopSales$Sales),]
# Display Sorted Data
Sorted_TopSales
# Get Index/ Row  positions meeting any particular criteria
IDX_POS <- which(CarData$Sales>300)
# Get the Subset using Index positions
CarSale_GT_300 <- CarData[IDX_POS,]
#Display Subset
CarSale_GT_300
# Get the Rows for which Sales are LT 300
CarSale_LT_300 <- CarData[-IDX_POS,]
# Display Subset
CarSale_LT_300
#Get the Model Name for the Max Sale Value
Max_Sale_Model <- CarData$Model[which.max(CarData$Sales)]
# Display Max Sale Model
Max_Sale_Model
# ------------   Important Verbs in DPLYR Package ---------------------------
# install.packages("dplyr")
library(dplyr)
#  selecting models column from CarData
Car_Models <- select(CarData,Model)
# Dispay Models Column
Car_Models
# select rows which have sales > 500
Sales_GT_500 <- filter(CarData, Sales > 500)
#Display
Sales_GT_500
# Sort CarData in descending order of highest sales
Sorted_CarData <-  arrange(CarData,desc(Sales))
# Display
Sorted_CarData
# Create  new column - Perc_Tot_Sales
CarData<-mutate(CarData,Perc_Tot_Sales = (100*Sales)/(sum(Sales)))
# Display
CarData
# Get the summary Statistics
Sale_Summary <- summarise(CarData,avg_sales = mean(Sales),
min_sales = min(Sales),
max_sales = max(Sales),
total_Sales = sum(Sales))
# Display
Sale_Summary
# Get summary statistics average sales by car manufacturer
Mf_Avg_Sales <- CarData %>% group_by(Make) %>% summarise(Avg_Sales=mean(Sales))
# Display
Mf_Avg_Sales
df1 <- as.data.frame(c("Anish","John","Kumar"))
df2 <- as.data.frame(c("Anish2","John2","Kumar2"))
df3 <- as.data.frame(c("Anish3","John3","Kumar3"))
#  Define List - with 3 Elements
my.list <- vector("list", 3)
# Populate List with data frames
my.list[[1]] <- list(df1)
my.list[[2]] <- list(df2)
my.list[[3]] <- list(df3)
# Display List
my.list
# Now convert List to dataframe
Finaldf <- as.data.frame(my.list)
# Set Column Names
names(Finaldf) <- c("Week1","Week2","Week3")
# Display Final df
Finaldf
setwd("~/Pro_Bono_Work/Amity/Amity_Final_Decks/R_Codes/Fundamentals_R")
#---------------------------------------------------------------------------
# Merge dataframes
#---------------------------------------------------------------------------
df1 = data.frame(CustomerId = c(1:6), Product = c(rep("Toaster", 3), rep("Radio", 3)))
df2 = data.frame(CustomerId = c(2, 4, 6), State = c(rep("Alabama", 2), rep("Ohio", 1)))
df1
df2
Inner_Merged <- merge(x = df1, y = df2, by = "CustomerId")
Inner_Merged
#---------------------------------------------------------------
#   Example of Inner Join
#---------------------------------------------------------------
Inner_Merged <- merge(x = df1, y = df2, by = "CustomerId")
Inner_Merged
#---------------------------------------------------------------
#   Example of Outer Join
#---------------------------------------------------------------
Outer_Merged <- merge(x = df1, y = df2, by = "CustomerId", all=TRUE)
Outer_Merged
#---------------------------------------------------------------
#   Example of Left Outer Join
#---------------------------------------------------------------
L_Outer_Merged <- merge(x = df1, y = df2, by = "CustomerId", all.x=TRUE)
L_Outer_Merged
#---------------------------------------------------------------
#   Example of Right Outer Join
#---------------------------------------------------------------
R_Outer_Merged <- merge(x = df1, y = df2, by = "CustomerId", all.y=TRUE)
R_Outer_Merged
